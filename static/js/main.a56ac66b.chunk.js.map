{"version":3,"sources":["../../react3/src/components/card/card.component.jsx","../../react3/src/components/card-list/card-list.component.jsx","../../react3/src/components/search-box/search-box.component.jsx","../../react3/src/App.js","../../react3/src/serviceWorker.js","../../react3/src/index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","monster","id","name","email","Cardlist","map","monsters","card_component_Card","key","SearchBox","_ref","placeholder","handelChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchField","_this2","_this$state","filteredMonsters","filter","toLowerCase","includes","search_box_component_SearchBox","e","setState","target","value","card_list_component_Cardlist","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAGaA,SAAO,SAACC,GAAD,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,kBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAM,WAAWC,IAAG,wBAAAC,OAA4BP,EAAMQ,QAAQC,GAA1C,mBACzBR,EAAAC,EAAAC,cAAA,UAAKH,EAAMQ,QAAQE,MACnBT,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,QAAQG,OAClBV,EAAAC,EAAAC,cAAA,8BCHKS,SAAW,SAAAZ,GAAK,OACzBC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aAaVJ,EAAMQ,QAAQK,IAAI,SAAAC,GAAQ,OAC1Bb,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAOF,EAASL,GAAID,QAAWM,SChBnCG,SAAY,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAaC,EAAfF,EAAeE,aAAf,OACrBnB,EAAAC,EAAAC,cAAA,SAAOC,UAAY,SAASiB,KAAO,SAASF,YAAeA,EAC3DG,SAAYF,MC6EDG,qBAzEb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CACXjB,SAAU,CACR,CACEJ,KAAM,WACND,GAAI,aACJE,MAAO,yBAET,CACED,KAAM,YACND,GAAI,cACJE,MAAO,2BAET,CACED,KAAM,OACND,GAAI,aACJE,MAAO,0BAET,CACED,KAAM,UACND,GAAI,aACJE,MAAO,qBAET,CACED,KAAM,UACND,GAAI,aACJE,MAAO,qBAET,CACED,KAAM,OACND,GAAI,aACJE,MAAO,kBAET,CACED,KAAM,SACND,GAAI,aACJE,MAAO,oBAET,CACED,KAAM,QACND,GAAI,aACJE,MAAO,oBAGXqB,YAAa,IA9CJR,wEAuDL,IAAAS,EAAAN,KAAAO,EAC0BP,KAAKI,MAA9BjB,EADDoB,EACCpB,SAAUkB,EADXE,EACWF,YAGXG,EAAmBrB,EAASsB,OAAO,SAAA5B,GAAO,OAC9CA,EAAQE,KAAK2B,cAAcC,SAASN,EAAYK,iBAClD,OACIpC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACbH,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAACoC,EAAD,CAAWpB,YAAc,kBACzBC,aAAgB,SAAAoB,GAAC,OAAIP,EAAKQ,SAAS,CAACT,YAAaQ,EAAEE,OAAOC,WAE5D1C,EAAAC,EAAAC,cAACyC,EAAD,CAAUpC,QAAW2B,YApEbU,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a56ac66b.chunk.js","sourcesContent":["import React from 'react'\n\nimport './card.styles.css';\nexport const Card = (props) => (\n    <div className = 'card-container' >\n        <img alt = \"monsters\" src = {`https://robohash.org/${props.monster.id}&size=180x180`}/>\n        <h1>{props.monster.name}</h1>\n        <p>{props.monster.email}</p>\n        <p>Animated world</p>\n    </div>\n)\n","import React from 'react'\n\nimport {Card} from '../card/card.component'\nimport './card-list.style.css';\n\nexport const Cardlist = props => (\n    <div className = 'card-list'>\n        \n            {/* <div className = 'card-container'> \n                <img alt = \"monsters\" src = {`https://robohash.org/3?set=set8&size=180x180`}/>\n                <h1>Moe Latt</h1>\n                <p>HandsomeBoy@gmail.com</p>\n            </div>\n            <div className = 'card-container'>\n                <img alt = \"monsters\" src = {`https://robohash.org/${<h1>Htoo Htoo</h1>}5?set=set4&size=180x180`}/>\n                <h1>Htoo Htoo</h1>\n                <p>BeautifulGirl@gmail.com</p>\n            </div> */}\n         {\n           props.monster.map(monsters => (\n           <Card key = {monsters.id} monster = {monsters}/>))\n         }\n    </div>\n);\n    \n","import React from 'react'\n\nimport './search-box.styles.css'\n\nexport const SearchBox = ({placeholder, handelChange }) =>(\n    <input className = 'search' type = 'search' placeholder = {placeholder} \n    onChange = {handelChange}/>\n);","import React,{Component} from 'react';\n// import logo from './logo.svg';\n\nimport  { Cardlist } from './components/card-list/card-list.component';\n\nimport {SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n  \n    this.state = {\n      monsters: [\n        {\n          name: 'Moe Latt',\n          id: '4?set=set5',\n          email: 'HandsomeBoy@gmail.com'\n        },\n        {\n          name: 'Htoo Htoo',\n          id: '23?set=set4',\n          email: 'BeautifulGirl@gmail.com'\n        },\n        {\n          name: 'Kzin',\n          id: '8?set=set4',\n          email: 'ForeverAlone@gmail.com'\n        },\n        { \n          name: 'Monster',\n          id: '3?set=set2',\n          email: 'monster@gmail.com'\n        },\n        {\n          name: 'Dracula',\n          id: '2?set=set2',\n          email: 'dracula@gmail.com'\n        },\n        {\n          name: 'Evil',\n          id: '6?set=set2',\n          email: 'evil@gmail.com'\n        },\n        {\n          name: 'Zombie',\n          id: '7?set=set2',\n          email: 'zombie@gmail.com'\n        },\n        {\n          name: 'Ghost',\n          id: '9?set=set2',\n          email: 'ghost@gmail.com'\n        }\n      ],\n      searchField: ''\n    };\n  }\n  // componentDidMount(){\n  //   fetch('https://jsonplaceholder.typicode.com/users')\n  //   .then(response => response.json())\n  //   .then(users => this.setState({monsters: users}))\n  // }\n  \n  render(){\n     const{monsters, searchField} = this.state;\n    // const monsters = this.state.monsters; same with above line\n    // const searchField = this.state.searchField;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return(\n        <div className = 'App'>\n            <h2> Welcome to Animated World</h2>\n            <SearchBox placeholder = 'search monsters' \n            handelChange = {e => this.setState({searchField: e.target.value})}\n             />\n          <Cardlist monster = {filteredMonsters}/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}